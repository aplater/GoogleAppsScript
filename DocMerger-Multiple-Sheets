function onOpen() {
    SpreadsheetApp
        .getUi()
        .createMenu('Custom')
        .addItem('Create DOC - Format 1', 'createDoc1')
        .addItem('Create DOC - Format 2', 'createDoc2');
        .addToUi()

} // onOpen()

function createDoc1() {
  createFunc(docID1);
}

function createDoc2(){
  createFunc(docID2);
}

// Create custom doc from spreadsheet rows.
function createFunc(docTemplateID) {
    var DOC_FOLDER = 'ADD_DOC_FOLDER_ID_HERE'; // Folder where DOC files will be saved
    var MAIN_FOLDER = 'ADD_MAIN_FOLDER_ID_HERE';// Main Folder where project is residing // In this case, one step higher than DOC_FOLDER

    var docTemplate = docTemplateID; // *** replace with your template ID ***
    var docName = "Sample"; // For naming DOC files
    
    var ss = SpreadsheetApp.getActiveSpreadsheet();
    var dataSheet = ss.getSheetByName("Sheet1");
    
    var numRows = getLastRow(dataSheet);
    var numCols = dataSheet.getLastColumn();
    var dataRange = dataSheet.getRange(2, 1, numRows - 1, numCols);

    // Create one JavaScript object per row of data.
    var objects = getRowsData(dataSheet, dataRange);
  
    for (var i = 0; i < objects.length; ++i) {
      // Get a row object
      var rowData = objects[i];
      if (!rowData.status) {
        // Get document template, copy it as a new temp doc, and save the Docâ€™s id
        var copyFileName = docName + "_" + i; 
        var copyId = DriveApp.getFileById(docTemplate).makeCopy(copyFileName).getId();
        
        // Open the temporary document
        var copyDoc = DocumentApp.openById(copyId);
        // Fill in the variable values from sheet
        fillInTemplateFromObject(copyDoc, rowData);
        // Save and close the temporary document
        copyDoc.saveAndClose();
        
        // Delete temp file
        var docFolder = DriveApp.getFolderById(DOC_FOLDER);
        var srcFolder = DriveApp.getFolderById(MAIN_FOLDER);
        var docFile = DriveApp.getFileById(copyId);
        docFolder.addFile(docFile);
        srcFolder.removeFile(docFile);
        
        dataSheet.getRange(i + 2, numCols).setValue("DONE");
      }
    }
}

/**Get last row with data. Works for cleared content rows. 
@param {spr}  sheet in current active spreadsheet.
@return {int} integer value of the last row.
*/

function getLastRow(spr) {
    var column = spr.getRange('A:A');
    var values = column.getValues();
    var ct = 0;
    while (values[ct] && values[ct][0] != "") {
        ct++;
    }
    return (ct);
}

/**
Replaces markers in a template string with values define in a JavaScript data object.
@param {string} template Contains markers, for instance {{Column name}}
@param {object} data values to that will replace markers.
For instance data.columnName will replace marker {{Column name}}
@return {string} A string without markers. If no data is found to replace a marker,
it is simply removed.
*/
function fillInTemplateFromObject(template, data) {
    var copyBody = template.getActiveSection(); 
    var docTemplate = template.getBody().getText();
    // Search for all the variables to be replaced, for instance {{Column name}}
    var templateVars = docTemplate.match(/{{[^{}]+}}/g); 

    if (templateVars) {
        // Replace variables from the template with the actual values from the data object.
        // If no value is available, replace with the empty string.

        for (var i = 0; i < templateVars.length; ++i) {
            // normalizeHeader ignores {{}} so we can call it directly here.
            var variableData = data[normalizeHeader(templateVars[i])]; 
            docTemplate = copyBody.replaceText(templateVars[i], variableData || '');
        }
    }
    return copyBody;
}
// getRowsData iterates row by row in the input range and returns an array of objects.
// Each object contains all the data for a given row, indexed by its normalized column name.
// Arguments:
// - sheet: the sheet object that contains the data to be processed
// - range: the exact range of cells where the data is stored
// - columnHeadersRowIndex: specifies the row number where the column names are stored.
// This argument is optional and it defaults to the row immediately above range;
// Returns an Array of objects.
function getRowsData(sheet, range, columnHeadersRowIndex) {
    columnHeadersRowIndex = columnHeadersRowIndex || range.getRowIndex() - 1;
    var numColumns = range.getEndColumn() - range.getColumn() + 1;
    var headersRange = sheet.getRange(columnHeadersRowIndex, range.getColumn(), 1, numColumns);
    var headers = headersRange.getValues()[0];
    return getObjects(range.getValues(), normalizeHeaders(headers));
}

// For every row of data in data, generates an object that contains the data. Names of
// object fields are defined in keys.
// Arguments:
// - data: JavaScript 2d array
// - keys: Array of Strings that define the property names for the objects to create
function getObjects(data, keys) {
    var objects = [];
    for (var i = 0; i < data.length; ++i) {
        var object = {};
        var hasData = false;
        for (var j = 0; j < data[i].length; ++j) {
            var cellData = data[i][j];
            // if (isCellEmpty(cellData)) {
            // continue;
            // }
            object[keys[j]] = cellData;
            hasData = true;
        }
        if (hasData) {
            objects.push(object);
        }
    }
    return objects;
}

// Returns an Array of normalized Strings.
// Arguments:
// - headers: Array of Strings to normalize
function normalizeHeaders(headers) {
    var keys = [];
    for (var i = 0; i < headers.length; ++i) {
        var key = normalizeHeader(headers[i]);
        if (key.length > 0) {
            keys.push(key);
        }
    }
    return keys;
}

// Normalizes a string, by removing all alphanumeric characters and using mixed case
// to separate words. The output will always start with a lower case letter.
// This function is designed to produce JavaScript object property names.
// Arguments:
// - header: string to normalize
// Examples:
// "First Name" -> "firstName"
// "Market Cap (millions) -> "marketCapMillions
// "1 number at the beginning is ignored" -> "numberAtTheBeginningIsIgnored"
function normalizeHeader(header) {
    var key = "";
    var upperCase = false;
    for (var i = 0; i < header.length; ++i) {
        var letter = header[i];
        if (letter == " " && key.length > 0) {
            upperCase = true;
            continue;
        }
        if (!isAlnum(letter)) {
            continue;
        }
        if (key.length == 0 && isDigit(letter)) {
            continue; // first character must be a letter
        }
        if (upperCase) {
            upperCase = false;
            key += letter.toUpperCase();
        } else {
            key += letter.toLowerCase();
        }
    }
    return key;
}

// Returns true if the cell where cellData was read from is empty.
// Arguments:
// - cellData: string
function isCellEmpty(cellData) {
    return typeof (cellData) == "string" && cellData == "";
}

// Returns true if the character char is alphabetical, false otherwise.
function isAlnum(char) {
    return char >= 'A' && char <= 'Z' ||
        char >= 'a' && char <= 'z' ||
        isDigit(char);
}

// Returns true if the character char is a digit, false otherwise.
function isDigit(char) {
    return char >= '0' && char <= '9';
}
